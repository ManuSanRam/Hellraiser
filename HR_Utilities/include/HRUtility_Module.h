#pragma once

/*!******************************************************************************************************************************************************************************

	@file		HRUtility_Module.h

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	This file contains the the declaration of the module class.
	This class is used to create a global instance of an object

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@date		13-08-2017
	@author		Manuel Santos Ramón [ManuSanRam]
	@copyright	Infernal Coders S.A

********************************************************************************************************************************************************************************/



#include "HRUtility_Prerequisites.h"

namespace HR_SDK
{
	/*!**************************************************************************************************************************************************************************

		@brief Module object.
		This objects are used to control global instances.

	****************************************************************************************************************************************************************************/
	template <class T>
	class HR_UTILITY_EXPORT C_Module
	{
	public:
		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		static T& Instance()
		{
			//! Check if the module has been deallocated
			if (IsShutdown())
			{
				//! 
			}
			//! Return the instance
			return *_Instance();
		}



		/*!**********************************************************************************************************************************************************************

			@brief 

		************************************************************************************************************************************************************************/
		static T* InstancePointer()
		{
			//! Check if the module has been started up
			if (IsShutdown())
			{
				//! 
			}

			return _Instance();
		}



		/*!**********************************************************************************************************************************************************************

			@brief passed the necessary parameters to a specific module

		************************************************************************************************************************************************************************/
		template<class... Arguments>
		static void StartUp(Arguments&&... _parameters)
		{
			//! Check if the module has already been initialized
			if (!IsShutdown())
			{
				//! Module has already been started up

			}

			//! Create a new instance of the provided type
			_Instance() = new T(std::forward<Arguments>(_parameters)...);

			//! Type is tarted up, so we mark the flag to show it is started up
			IsShutdown() = false;

			//! Mark instance as being started up
			((C_Module*)_Instance())->OnStartUp();
		}



		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@params _parameters

		************************************************************************************************************************************************************************/
		template<class SubType, class... Arguments>
		static void StartUp(Arguments&&... _parameters)
		{
			//! Make sure the type passed is derived from the initialized type
			static_assert(std::is_base_of<T, SubType>::value, "Type is not derived from the initialized type.");

			//! Check if the module has already been initialized
			if (!IsShutdown())
			{
				//! Module has already been started up

			}

			_Instance() = hr_new<T>(std::forward<Arguments>(_parameters)...);
			IsShutdown() = false;
			
			((C_Module*)_Instance())->OnStartUp();
		}



		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		static void Shutdown()
		{
			//! Check if instance is already destroyed or being shutdown
			if (IsDestroyed() || IsShutdown())
			{
				//! This instance has already been shutdown
			}

			((Module*)_Instance())->Shutdown();

			//! Delete the instance
			hr_delete(_Instance());		
			//! Declare flag as shutdown, to show instance has been deallocated
			IsShutdown() = true;
		}



		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		static bool IsStartedUp()
		{//! Check if the instance is not beign already started up, nor if it was already shutdown
			return !IsShutdown() && !IsDestroyed();
		}



	protected:
		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		C_Module()
		{

		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		virtual ~C_Module()
		{
			_Instance() = nullptr;
			IsDestroyed() = true;
		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		C_Module(const C_Module& _module)
		{

		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		C_Module& operator =(const C_Module& _module)
		{
			return *this;
		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		virtual void OnStartUp()
		{

		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		virtual void OnShutdown()
		{

		}



		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		static T*& _Instance()
		{
			static T* _instance = nullptr;
			return _instance;
		}



		/*!**********************************************************************************************************************************************************************
		

		
		************************************************************************************************************************************************************************/
		static bool& IsDestroyed()
		{
			static bool inst = false;
			return inst;
		}



		/*!**********************************************************************************************************************************************************************
		
		
		
		************************************************************************************************************************************************************************/
		static bool& IsShutdown()
		{
			static bool inst = true;
			return inst;
		}
	};
}
