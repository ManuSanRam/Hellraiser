#pragma once

/*!******************************************************************************************************************************************************************************
	
	@file		HRUtility_PlatformTypes.h

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																											   
	This file contains custom types depending of the active platform and compiler the engine's running.	
	The custom types are the following:																	
	- Unsigned and signed 8-bit integers.																
	- Unsigned and signed 16-bit integers.																
	- Unsigned and signed 32-bit integers.																
	- Unsigned and signed 64-bit integers.																
	- Unsigned and signed 128-bit integers.															
	- Wide characters.
	- ANSI-type characters.
	- UNICODE-type characters, used to create strings that utilize UNICODE.																			
	- SIZE_T type, used to describe the byte size of types.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@date		10-09-2016																				
	@author		Manuel Aldair Santos Ramón (ManuSanRam)													
	@copyright	Infernal Coders S.A.

********************************************************************************************************************************************************************************/

//! If the active platform to develop is Play Station 4
#if HR_ACTIVE_PLATFORM == HR_PLATFORM_PS4
  #include <scebase.h>
#endif

/*!******************************************************************************************************************************************************************************

	@namespace HR_SDK
	@brief Defines the namespace that contains every basic type and operation used inside the engine			

********************************************************************************************************************************************************************************/
namespace HR_SDK
{
	/*!**************************************************************************************************************************************************************************

		SECTION #1: INTEGER TYPES.

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		This section contains the declaration of every integer type:
		- Dynamic Link Library Export macro.
		- Debugging Mode.
		- Thread Local.

	****************************************************************************************************************************************************************************/
	/*!**************************************************************************************************************************************************************************

		UNSIGNED INTEGER TYPES

	****************************************************************************************************************************************************************************/
	/*!**************************************************************************************************************************************************************************

		@brief Unsigned 8-bit size integer

	****************************************************************************************************************************************************************************/
	typedef unsigned char    uint8;


	/*!**************************************************************************************************************************************************************************

		@brief Unsigned 16-bit size integer

	****************************************************************************************************************************************************************************/
	typedef unsigned short   uint16;


	/*!**************************************************************************************************************************************************************************

		@brief Unsigned 32-bit size integer

	****************************************************************************************************************************************************************************/
	typedef unsigned int     uint32;


#if HR_ACTIVE_COMPILER == HR_COMPILER_MSVC
	/*!**************************************************************************************************************************************************************************

		@brief Unsigned 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef unsigned __int64 uint64;


#else
	/*!**************************************************************************************************************************************************************************

		@brief Unsigned 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef unsigned long    uint64;


#endif

	/*!*********************************************************************************************************************************************************
		
		SIGNED INTEGER TYPES

	***********************************************************************************************************************************************************/
	/*!**************************************************************************************************************************************************************************

		@brief Signed 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef signed char      int8;


	/*!**************************************************************************************************************************************************************************

		@brief Signed 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef signed short     int16;


	/*!**************************************************************************************************************************************************************************

		@brief Signed 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef signed int       int32;


#if HR_ACTIVE_COMPILER == HR_COMPILER_MSVC
	/*!**************************************************************************************************************************************************************************

		@brief Signed 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef signed __int64   int64;


#else
	/*!**************************************************************************************************************************************************************************

		@brief Signed 64-bit size integer

	****************************************************************************************************************************************************************************/
	typedef signed long      int64;


#endif

	/*!**************************************************************************************************************************************************************************
		
		@class QWord
		@brief 128-bit size integer type

	****************************************************************************************************************************************************************************/
	MS_ALIGN(16) class HR_UTILITY_EXPORT QWord
	{
	public:
		/*!**********************************************************************************************************************************************************************

			@brief Lower part of the 128-bit integer (Numeric value)

		************************************************************************************************************************************************************************/
		uint64 a_Lower;


		/*!**********************************************************************************************************************************************************************

			@brief Upper part of the 128-bit integer (Sign)

		************************************************************************************************************************************************************************/
		int64  a_Upper;


		/*!**********************************************************************************************************************************************************************

			@brief Operator overloaded for casting

		************************************************************************************************************************************************************************/
		operator int64 () const
		{
			return a_Lower;
		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Default]

		************************************************************************************************************************************************************************/
		QWord()
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #1

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from Boolean number to create a unit lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(bool _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #2

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from Unsigned 8-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(uint8 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #3

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from 8-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(int8 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #4

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from Unsigned 16-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(uint16 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #5

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from 16-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(int16 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #6

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from Unsigned 32-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(uint32 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #7

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from 32-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(int32 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #8

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from Unsigned 64-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(uint64 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #9

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from 64-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(int64 _from) : a_Lower(_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #10

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _from 32-bit floating point number used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(float _from) : a_Lower((uint64)_from), a_Upper(0)
		{

		}


		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Parameter] #11

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		 
			@param _from 64-bit integer used to create the lower part of the Q-word

		************************************************************************************************************************************************************************/
		QWord(double _from) : a_Lower((uint64)_from), a_Upper(0)
		{

		}
	};
	GCC_ALIGN(16)
	/*!**************************************************************************************************************************************************************************

		@brief Signed integer type of 128 bits size

	****************************************************************************************************************************************************************************/
	typedef QWord            int128;

		
	/*!**************************************************************************************************************************************************************************

		@brief Unsigned integer type of 128 bits size

	****************************************************************************************************************************************************************************/
	typedef QWord            uint128;


	/*!**************************************************************************************************************************************************************************

		SECTION #2: CHARACTER TYPES.

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		This section contains the declaration of every integer type:
		- Dynamic Link Library Export macro.
		- Debugging Mode.
		- Thread Local.

	****************************************************************************************************************************************************************************/
	//! Only for Microsoft Visual Compiler or ORBIS compiler definition of wide characters
#if HR_ACTIVE_COMPILER == HR_COMPILER_MSVC || HR_ACTIVE_PLATFORM == HR_PLATFORM_PS4

	/*!**************************************************************************************************************************************************************************

		@brief Type to describe a wide char.
		Wide characters are 16-bit size char types (Double of the common char type), used to write multi-language characters [MSV and ORBIS compiler]. 

	****************************************************************************************************************************************************************************/
	typedef wchar_t         WIDE_CHAR;


#else
	/*!**************************************************************************************************************************************************************************

		@brief Type to describe a wide char.
		Wide characters are 16-bit size characters (Double of the common char type), used to write multi-language characters [UNIX and OSX compilers].

	****************************************************************************************************************************************************************************/
	typedef unsigned short  WIDE_CHAR;


#endif

	/*!**************************************************************************************************************************************************************************

		@brief Type to describe an ANSI type character.
		ANSI characters are 8-bit characters.

	****************************************************************************************************************************************************************************/
	typedef char            ANSI_CHAR;
	
	
	/*!**************************************************************************************************************************************************************************

		@brief Type to describe a UNICODE type character.
		UNICODE characters are wide chars encoded in UNICODE standard, used for multi-language characters.

	****************************************************************************************************************************************************************************/
	typedef WIDE_CHAR       UNICODE_CHAR;


	/*!**************************************************************************************************************************************************************************

		@brief Memory type to represent data in 1 byte (8 bits)

	****************************************************************************************************************************************************************************/
	typedef char			Byte;


	/*!**************************************************************************************************************************************************************************

		SECTION #3: BYTE SIZE TYPE.

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		This section contains the declaration of every integer type:
		- Dynamic Link Library Export macro.
		- Debugging Mode.
		- Thread Local.

	****************************************************************************************************************************************************************************/
	//! For system architectures of 64 bits and if Microsoft Visual compileris beign used
#if ((HR_ACTIVE_ARCHITECTURE == HR_ARCH_x86_64) && (HR_ACTIVE_COMPILER == HR_COMPILER_MSVC))
	/*!**************************************************************************************************************************************************************************

		@brief Type to define the size of data
	
	****************************************************************************************************************************************************************************/
	typedef unsigned __int64 SIZE_T;


#else
	/*!**************************************************************************************************************************************************************************

		@brief Type to define the size of data

	****************************************************************************************************************************************************************************/
	typedef unsigned long    SIZE_T;


#endif
}