#include "HRUtility_PlatformMath.h"

/*!***********************************************************************************************************************************************************
 * @file		HRUtility_Math.cpp
 *
 * This file contains the definitions of mathematic functions used inside the engine, contained inside a Platform-specific Math class.
 * The mathematic operations are as follows(in order):
 *
 * @date        25-09-2016
 * @author      Manuel Aldair Santos Ramón (ManuSanRam)
 * @copyright   Infernal Coders S.A.
*************************************************************************************************************************************************************/

#include "HRUtility_AABB.h"
#include "HRUtility_Plane.h"
#include "HRUtility_Box.h"
#include "HRUtility_Sphere.h"
#include "HRUtility_Ray.h"
#include "HRUtility_Line.h"

namespace HR_SDK
{
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Pi =      (4.0f * C_PlatformMath::ArcTangent(1.0));
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Inv_Pi =  1.0f / C_PlatformMath::m_Pi;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Half_Pi = C_PlatformMath::m_Pi / 2.0f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Two_Pi =  2.0f * C_PlatformMath::m_Pi;
  
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Euler =  
	  (1.0f / C_PlatformMath::Factorial(0.0f)) + (1.0f / C_PlatformMath::Factorial(1.0f)) + 
	  (1.0f / C_PlatformMath::Factorial(2.0f)) + (1.0f / C_PlatformMath::Factorial(3.0f)) + 
	  (1.0f / C_PlatformMath::Factorial(4.0f)) + (1.0f / C_PlatformMath::Factorial(5.0f)) + 
	  (1.0f / C_PlatformMath::Factorial(6.0f)) + (1.0f / C_PlatformMath::Factorial(7.0f));
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const uint8 C_PlatformMath::  m_Min_uint8 =    std::numeric_limits<uint8>::  min();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const uint16 C_PlatformMath:: m_Min_uint16 =   std::numeric_limits<uint16>:: min();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const uint32 C_PlatformMath:: m_Min_uint32 =   std::numeric_limits<uint32>:: min();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const uint64 C_PlatformMath:: m_Min_uint64 =   std::numeric_limits<uint64>:: min();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const uint128 C_PlatformMath::m_Min_uint128 =  std::numeric_limits<uint128>::min();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Min_float =      std::numeric_limits<float>::min();

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const int8 C_PlatformMath::	m_Max_int8 =      std::numeric_limits<int8>::  max();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const int16 C_PlatformMath::	m_Max_int16 =     std::numeric_limits<int16>:: max();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const int32 C_PlatformMath::	m_Max_int32 =     std::numeric_limits<int32>:: max();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const int64 C_PlatformMath::	m_Max_int64 =     std::numeric_limits<int64>:: max();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const int128 C_PlatformMath::	m_Max_int128 =    std::numeric_limits<int128>::max();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_Max_float =      std::numeric_limits<float>::max();

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::m_DegreeToRadian = C_PlatformMath::m_Pi / 180.0f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::m_RadianToDegree = 180.0f / C_PlatformMath::m_Pi;

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Pos_Infinite = std::numeric_limits<float>::infinity();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Neg_Infinite = -C_PlatformMath::m_Pos_Infinite;

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::	m_LogB2 = (float)(std::log(2.0f));
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Delta =             0.00000001f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_SmallNumber =       1.e-8f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_SmallNumber_Float = 1.e-6f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_SmallNumber_Kinda = 1.e-4f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_BigNumber =         3.4e38f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_BigNumber_Kinda =   3.4e19f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Epsilon_Float =     std::numeric_limits<float>::epsilon();
  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Epsilon_Double =    (float)std::numeric_limits<double>::epsilon();

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_PointOnPlane =         0.10f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_PointOnSide =          0.20f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_PointsAreSame =        0.00002f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_PointsAreClose =       0.015f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_NormalAreSame =        0.00002f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_VectorsAreClose =      0.0004f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_SplitPolyWithPlane =   0.25f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_SplitPolyPrecise =     0.01f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_ZeroOnPlane =          0.0001f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_NormalsAreParallel =   0.999845f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_NormalsAreOrthogonal = 0.017f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_VectorNormalized =     0.01f;
  /*!**********************************************************************************************************************************************************************
  * @brief
  *************************************************************************************************************************************************************************/
  const float C_PlatformMath::  m_Threshold_QuaternionNormalized = 0.01f;

  /*!**********************************************************************************************************************************************************************
  * @brief
  * @param
  * @param
  * @return If true, there's no collision, if false, there is a collision between two AABBs
  *************************************************************************************************************************************************************************/
  float C_PlatformMath::LogB2(float prm_Value)
  {
	  return C_PlatformMath::LogNat(prm_Value) / C_PlatformMath::m_LogB2;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return If true, there's no collision, if false, there is a collision between two AABBs
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvAABB(const C_AABB& prm_A, const C_AABB& prm_B)
  {
	//C_Vector3D AABB_AVert[8];
	//C_Vector3D AABB_BVert[8];
	//
	//AABB_AVert[0].Set(prm_A.m_Min.m_x, prm_A.m_Min.m_y, prm_A.m_Min.m_z);
	//AABB_AVert[1].Set(prm_A.m_Max.m_x, prm_A.m_Min.m_y, prm_A.m_Min.m_z);
	//AABB_AVert[2].Set(prm_A.m_Max.m_x, prm_A.m_Max.m_y, prm_A.m_Min.m_z);
	//AABB_AVert[3].Set(prm_A.m_Min.m_x, prm_A.m_Max.m_y, prm_A.m_Min.m_z);
	//AABB_AVert[4].Set(prm_A.m_Min.m_x, prm_A.m_Min.m_y, prm_A.m_Max.m_z);
	//AABB_AVert[5].Set(prm_A.m_Max.m_x, prm_A.m_Min.m_y, prm_A.m_Max.m_z);
	//AABB_AVert[6].Set(prm_A.m_Max.m_x, prm_A.m_Max.m_y, prm_A.m_Max.m_z);
	//AABB_AVert[7].Set(prm_A.m_Min.m_x, prm_A.m_Max.m_y, prm_A.m_Max.m_z);
	//
	//AABB_BVert[0].Set(prm_B.m_Min.m_x, prm_B.m_Min.m_y, prm_B.m_Min.m_z);
	//AABB_BVert[1].Set(prm_B.m_Max.m_x, prm_B.m_Min.m_y, prm_B.m_Min.m_z);
	//AABB_BVert[2].Set(prm_B.m_Max.m_x, prm_B.m_Max.m_y, prm_B.m_Min.m_z);
	//AABB_BVert[3].Set(prm_B.m_Min.m_x, prm_B.m_Max.m_y, prm_B.m_Min.m_z);
	//AABB_BVert[4].Set(prm_B.m_Min.m_x, prm_B.m_Min.m_y, prm_B.m_Max.m_z);
	//AABB_BVert[5].Set(prm_B.m_Max.m_x, prm_B.m_Min.m_y, prm_B.m_Max.m_z);
	//AABB_BVert[6].Set(prm_B.m_Max.m_x, prm_B.m_Max.m_y, prm_B.m_Max.m_z);
	//AABB_BVert[7].Set(prm_B.m_Min.m_x, prm_B.m_Max.m_y, prm_B.m_Max.m_z);
	//
	//return
	//(
	//	(AABB_AVert[0] <= AABB_BVert[6]) &&
	//	(AABB_AVert[1] >= AABB_BVert[7]) &&
	//	(AABB_AVert[2] >= AABB_BVert[4]) &&
	//	(AABB_AVert[3] >= AABB_BVert[5]) &&
	//	(AABB_AVert[4] >= AABB_BVert[2]) &&
	//	(AABB_AVert[5] >= AABB_BVert[3]) &&
	//	(AABB_AVert[6] >= AABB_BVert[0]) &&
	//	(AABB_AVert[7] >= AABB_BVert[1])
	//)
	//  ;
	  return false;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_PlanevPlane(C_Plane& prm_A, C_Plane& prm_B)
  {
	  if (prm_A.m_Normal.Dot(prm_B.m_Normal) - prm_A.m_D)
	  {
		  //! No collision!
		  return false;
	  }

	  else
	  {
		  //! Two planes are colliding
		  return true;
	  }
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_BoxvBox(const C_Box& prm_A, const C_Box& prm_B)
  {
	  return
		  (prm_A.m_Min.m_x <= prm_B.m_Max.m_x && prm_A.m_Max.m_x >= prm_B.m_Min.m_x) && //! Check X axis
		  (prm_A.m_Min.m_y <= prm_B.m_Max.m_y && prm_A.m_Min.m_y >= prm_B.m_Max.m_y) && //! Check Y axis
		  (prm_A.m_Min.m_z <= prm_B.m_Max.m_z && prm_A.m_Min.m_z >= prm_B.m_Max.m_z);   //! Check Z axis
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return 
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_SpherevSphere(const C_Sphere& prm_A, const C_Sphere& prm_B)
  {
	  //! Get distance between sphere's centers
	  C_Vector3D DistanceBetweenSpheres = prm_A.m_Center - prm_B.m_Center;
	  
	  //! If magnitude of distance vector is greater than sum of spheres radius
	  if (DistanceBetweenSpheres.Length() > (prm_A.m_Radius + prm_B.m_Radius))
	  {
		  //! No collision
		  return false;
	  }

	  else
	  {
		  //! Collision detected!
		  return true;
	  }
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvPlane(const C_AABB& prm_A, const C_Plane& prm_B)
  {
	  return 
		  (prm_B.m_Normal.Dot(prm_A.m_Min) > 0.0f) && (prm_B.m_Normal.Dot(prm_A.m_Max) > 0.0f);
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvBox(const C_AABB& prm_A, const C_Box& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvSphere(const C_AABB& prm_A, const C_Sphere& prm_B)
  {
	  return 
		  ((prm_B.m_Center - prm_A.m_Min).Length() < prm_B.m_Radius);
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvRay(const C_AABB& prm_A, const C_Ray& prm_B)
  {
	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_AABBvLine(const C_AABB prm_A, const C_Line& prm_B)
  {
	  return false;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_PlanevBox(const C_Plane& prm_A, const C_Box& prm_B)
  {
	  //! if false, there's no collision. If true, it collided somewhere
	  return (prm_A.m_Normal.Dot(prm_B.m_Min) == 0.0f) || (prm_A.m_Normal.Dot(prm_B.m_Max) == 0.0f);
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_PlanevSphere(const C_Plane& prm_A, const C_Sphere& prm_B, float& SideOfCollision)
  {
	  //! If the difference is zero, COLLISION! if different to zero, no collision :c
	  float ColliderCheck = (prm_A.m_Normal.Dot(prm_B.m_Center) - (prm_A.m_D + prm_B.m_Radius));
	  if (!ColliderCheck)
	  {
		  SideOfCollision = ColliderCheck;
		  return false;
	  }

	  else
	  {
		  //!
		  SideOfCollision = ColliderCheck;
		  return true;
	  }
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_PlanevRay(const C_Plane& prm_A, const C_Ray& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_PlanevLine(const C_Plane, const C_Line& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_BoxvSphere(const C_Box& prm_A, const C_Sphere& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_BoxvRay(const C_Box& prm_A, const C_Ray& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_BoxvLine(const C_Box, const C_Line& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_SpherevRay(const C_Sphere& prm_A, const C_Ray& prm_B)
  {

	  return true;
  }

  /*!**********************************************************************************************************************************************************************
   * @brief
   * @param
   * @param
   * @return
  *************************************************************************************************************************************************************************/
  bool C_PlatformMath::Intersection_SpherevLine(const C_Sphere, const C_Line& prm_B)
  {

	  return true;
  }
}