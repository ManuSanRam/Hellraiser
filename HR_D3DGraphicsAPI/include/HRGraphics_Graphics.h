#pragma once

/*!******************************************************************************************************************************************************************************

	@file		HRGraphics_Graphics.h

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	This file contains the declaration of graphics pipeline class, used to load, set and manage graphic pipeline objects.
	The methods implemented in the class are:
	- Initializing DirectX.
	- Setting the graphics environment.
	- Drawing to screen.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																											   
	@date		20-07-2017																																				   
	@author		Manuel Aldair Santos Ramón (ManuSanRam)																													   
	@copyright	Infernal Coders S.A.							

********************************************************************************************************************************************************************************/



#include "HRGraphics_Prerequisites.h"

#include <HRUtility_Logger.h>

#include "HRGraphics_RenderTarget.h"
#include "HRGraphics_Depth.h"

#include "HRGraphics_Shader.h"

#include "HRGraphics_Buffer.h"
#include "HRGraphics_InputLayout.h"
#include "HRGraphics_Viewport.h"

#include "HRGraphics_ShaderResource.h"
#include "HRGraphics_Sampler.h"

#include "HRGraphics_Rasterizer.h"



namespace HR_SDK
{
	struct GraphicsDevice;
	struct GraphicsDeviceContext;
	struct GraphicsSwapChain;



	/*!**************************************************************************************************************************************************************************

		@class C_GraphicsAPI

		@brief Graphics API used to control graphics using methods and types of DirectX 11 and OpenGL													   
		Every method, variable and type are encapsulated so only Graphics API is the one managing any graphical operation internally

	****************************************************************************************************************************************************************************/
	class HR_D3DGRAPHICSAPI_EXPORT C_GraphicsAPI
	{
	public:
		/*!**********************************************************************************************************************************************************************

			@brief Constructor [Default]	

		************************************************************************************************************************************************************************/
		C_GraphicsAPI
		(

		)
		{
			m_Fullscreen = false;
			m_VSync = true;

			m_SwapChain = NULL;
			m_Device = NULL;
			m_DC = NULL;
		}



		/*!**********************************************************************************************************************************************************************

			@brief Destructor																																				 

		************************************************************************************************************************************************************************/
		~C_GraphicsAPI
		(

		)
		{

		}



		/*!**********************************************************************************************************************************************************************

			@brief Turns on or off the fullscreen rendering

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _fullscreen Flag to turn on or off the fullscreen rendering

		************************************************************************************************************************************************************************/
		void SetFullscreen
		(
			bool _fullscreen
		)
		{
			m_Fullscreen = _fullscreen;
		}

		
		
		/*!**********************************************************************************************************************************************************************

			@brief Turns on or off the vertical synchronization of the pipeline.

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _VSync Flag to turn on or off the vertical sync

		************************************************************************************************************************************************************************/
		void SetVSync
		(
			bool _VSync
		)
		{
			//! Assign the value passed as parameter to the pipeline
			m_VSync = _VSync;
		}



		/*!**********************************************************************************************************************************************************************

			@brief Initiates the graphics pipeline, setting the GPU device, device context and swap chain.

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _ScrW Width of the screen
			@param _ScrH Height of the screen
			@param _Format Format of the pipeline objects
			@param _ScanlineMode Scanline mode used in the rasterizer
			@param _ScalingMode Scaling mode of the images
			@param _DXGIUsage Usage given to the buffer of the swap chain
			@param _Wnd Index ID of the window
			@param _Fullscreen Flag to determine if the pipeline renders on fullscreen
			@param _SwapEffect Effect of the swap chain to change between render targets
			@param _DriverType Driver used by the GPU

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return True if the pipeline objects were created successfully, false if an error was encountered.

		************************************************************************************************************************************************************************/
		bool Init
		(
			uint32				_ScrW,
			uint32				_ScrH,
			DXGI_Formats::E		_Format,
			DXGI_Scanlines::E	_ScanlineMode,
			DXGI_Scaling::E		_ScalingMode,
			const uint64		_DXGIUsage,
			uint32				_Wnd,
			bool				_Fullscreen,
			DXGI_SwapEffect::E	_SwapEffect,
			D3D_Drivers::E		_DriverType
		);



		///*!********************************************************************************************************************************************************************

		///																	    CREATE PIPELINE OBJECTS

		///**********************************************************************************************************************************************************************
		///************************************************************************ Output Merger ******************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Creates a depth stencil object to set a depth buffer for rendering geometry at certain levels

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _width
			@param _height

			@param _format
			@param _usage
			@param _bind

			@param _depthStencil Pointer to create depth stencil object

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return True, if depth stencil object was successfully created. False, if any error was created

		************************************************************************************************************************************************************************/
		bool CreateDepthStencil
		(
			uint32			_width,
			uint32			_height,
			DXGI_Formats::E	_format,
			D3D_Usages::E	_usage,
			D3D_Binds::E	_bind,
			C_DepthStencil* _depthStencil
		);
		


		/*!**********************************************************************************************************************************************************************

			@brief Create a render target

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Pointer to hold the data of a render target object

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return True if the render target object was created successfully, false if not

		************************************************************************************************************************************************************************/
		bool CreateRenderTarget
		(
			C_RenderTarget* _renderTarget
		);



		///********************************************************************** Vertex shader stage **************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _shaderFile
			@param _shaderEntryPoint
			@param _shaderProfile
			@param _vShader

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateVertexShader
		(
			const String&	_shaderFile,
			const String&	_shaderEntryPoint,
			const String&	_shaderProfile,
			C_VertexShader* _vShader
		);



		///*********************************************************************** Pixel shader stage **************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _shaderFile
			@param _shaderEntryPoint
			@param _shaderProfile
			@param _pShader

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreatePixelShader
		(
			const String&	_shaderFile,
			const String&	_shaderEntryPoint,
			const String&	_shaderProfile,
			C_PixelShader*	_pShader
		);



		///**************************************************************************** Geometry *******************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _access
			@param _usage
			@param _vBuff

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateVertexBuffer
		(
			D3D_Access::E	_access,
			D3D_Usages::E	_usage,
			C_VBuffer*		_vBuff
		);



		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _access
			@param _usage
			@param _iBuff

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateIndexBuffer
		(
			D3D_Access::E	_access,
			D3D_Usages::E	_usage,
			C_IBuffer32*	_iBuff
		);



		///************************************************************************ Input Assembler ****************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Adds a 

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _semantic
			@param _index

			@param _format
			
			@param _byteOffset
			@param _inLayout

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		void AddInput
		(
			char*			_semantic,
			uint32			_index,
			DXGI_Formats::E _format,
			uint32			_byteOffset,
			C_InputLayout*	_inLayout
		);



		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _vShader
			@param _inLayout

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateInputLayout
		(
			C_VertexShader*		_vShader,
			C_InputLayout*		_inLayout
		);



		/*!**********************************************************************************************************************************************************************

			@brief Creates a viewport

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _posX
			@param _posY
			@param _width
			@param _height

			@param _minDepth
			@param _maxDepth

			@param _viewport

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateViewport
		(
			uint32			_posX,
			uint32			_posY,
			uint32			_width,
			uint32			_height,
			float			_minDepth,
			float			_maxDepth,
			C_Viewport*		_viewport
		);



		///************************************************************************ Constant buffer ****************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _access
			@param _usage
			@param _size

			@param _cBuff

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateConstantBuffer
		(
			D3D_Access::E		_access,
			D3D_Usages::E		_usage,
			SIZE_T				_size,
			C_ConstantBuffer*	_cBuff
		);



		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _access
			@param _usage
			@param _size

			@param _cBuff

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool MapConstantBuffer
		(
			void*				_data,
			SIZE_T				_size,
			C_ConstantBuffer*	_cBuff
		);



		///**************************************************************************** Txture *********************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _access
			@param _usage
			@param _size

			@param _cBuff

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateTexture
		(
			const String& _fileName,
			DXGI_Formats::E	_Format,
			C_Texture* _texture
		);



		///********************************************************************* Shader Resource View **************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _format
			@param _texture
			@param _srv

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateShaderResourceView
		(
			DXGI_Formats::E _format,
			C_Texture* _texture,
			C_ShaderResource* _srv
		);
		


		///*************************************************************************** Sampler *********************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _sampler

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateSampler
		(
			C_Sampler* _sampler
		);
		


		///************************************************************************** Rasterizer *******************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _fillmode
			@param _cullmode
			@param _rasterizer

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool CreateRasterizer
		(
			D3D_FillModes::E _fillMode,
			D3D_CullModes::E _cullMode,
			C_Rasterizer* _rasterizer
		);
		///**********************************************************************************************************************************************************************

///------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		///**********************************************************************************************************************************************************************

		///																         SET PIPELINE OBJECTS

		///*********************************************************************************************************************************************************************/
		///************************************************************************ Output Merger ******************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline
			@param _depthStencil
			@param _renderTarget

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetRenderTarget
		(
			uint32			_numViews,
			C_DepthStencil* _depthStencil,
			C_RenderTarget* _renderTarget
		);



		/*!**********************************************************************************************************************************************************************

			@brief Clears the render target

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline
			@param _clearColor Color passed to clear the render target

		************************************************************************************************************************************************************************/
		void ClearRenderTarget
		(
			C_RenderTarget* _renderTarget,
			C_LinearColor	_clearColor
		);




		/*!**********************************************************************************************************************************************************************

		@brief Clears the render target

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@param _renderTarget Render target to be set into the pipeline
		@param _clearColor Color passed to clear the render target

		************************************************************************************************************************************************************************/
		void ClearDepthStencilView
		(
			C_DepthStencil* _depth
		);



		///********************************************************************** Vertex shader stage **************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Sets a vertex shader to the pipeline to be compiled into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _vertexShader Vertex shader object to be set to the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetVertexShader
		(
			C_VertexShader* _vertexShader
		);



		///*********************************************************************** Pixel shader stage **************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Sets a pixel shader to the pipeline to be compiled into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _pixelShader Pixel shader object to be set to the pipeline

			@return

		************************************************************************************************************************************************************************/
		bool SetPixelShader
		(
			C_PixelShader* _pixelShader
		);



		///**************************************************************************** Geometry *******************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Set a vertex data buffer into the GPU to be rendered

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _vBuff Buffer containing the vertex data

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetVertexBuffer
		(
			C_VBuffer* _vBuff
		);



		/*!**********************************************************************************************************************************************************************

			@brief Set an index buffer into the GPU to be used

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _iBuff Buffer containing the indices of the geometry

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetIndexBuffer
		(
			DXGI_Formats::E _format,
			C_IBuffer32*	_iBuff
		);


		
		///************************************************************************ Input Assembler ****************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return 

		************************************************************************************************************************************************************************/
		bool SetInputLayout
		(
			C_InputLayout* _inputLayout
		);


		
		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		void SetTopology
		(
			D3D_Topologies::E _topology
		);
		

		
		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetViewport
		(
			C_Viewport* _viewport
		);



		///************************************************************************ Constant buffer ****************************************************************************/
		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@param _renderTarget Render target to be set into the pipeline

		-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			@return

		************************************************************************************************************************************************************************/
		bool SetConstantBuffer
		(
			uint32				_slot,
			uint32				_numBuffers,
			C_ConstantBuffer*	_cBuff
		);


		///********************************************************************* Shader Resource View **************************************************************************/
		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		bool SetShaderResourceView
		(
			uint32				_slot,
			uint32				_numResources,
			C_ShaderResource*	_SRV
		);



		///*************************************************************************** Sampler *********************************************************************************/
		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		bool SetSampler
		(	
			uint32		_slot,
			uint32		_numSamplers,
			C_Sampler*	_sampler
		);



		///************************************************************************** Rasterizer *******************************************************************************/
		/*!**********************************************************************************************************************************************************************



		************************************************************************************************************************************************************************/
		bool SetRasterizer
		(
			C_Rasterizer* _raster
		);
		///**********************************************************************************************************************************************************************
		
		
		/*!
		*/
		void DrawGeometry
		(
			uint32 _numIndices,
			uint32 _startIndexLoc,
			uint32 _baseVertexLoc
		);


		
		/*!**********************************************************************************************************************************************************************

			@brief Renders any loaded data of the pipeline to the screen.

		************************************************************************************************************************************************************************/
		void Render
		(

		);



		/*!**********************************************************************************************************************************************************************

			@brief 

		************************************************************************************************************************************************************************/
		void Close
		(

		);



		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		************************************************************************************************************************************************************************/
		bool					m_Fullscreen;



		/*!**********************************************************************************************************************************************************************

			@brief Set a render target into the pipeline

		************************************************************************************************************************************************************************/
		bool					m_VSync;



		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		GraphicsDevice*			m_Device;



		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		GraphicsDeviceContext*	m_DC;



		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		GraphicsSwapChain*		m_SwapChain;
	};
}