#pragma once



/*!******************************************************************************************************************************************************************************

	@file		HRGraphics_D3DTypes.h

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	This file contains the declaration of types used by the Direct 3D.
	This types are declared to abstract the types used by the API, so the user can use a 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@date		30-08-2017
	@author		Manuel Santos Ramón [ManuSanRam]
	@copyright	Infernal Coders S.A

********************************************************************************************************************************************************************************/



namespace HR_SDK
{
	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Drivers

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Driver options for Direct X 11 

	****************************************************************************************************************************************************************************/
	namespace D3D_Drivers
	{
		/*!**********************************************************************************************************************************************************************

			@brief Types of drivers

		************************************************************************************************************************************************************************/
		enum E
		{
			UNKNOWN,					//! Unknown driver type
			HARDWARE = UNKNOWN + 1,		//! Hardware driver type
			REFERENCE = HARDWARE + 1,	//! Reference driver type
			NULL_TYPE = REFERENCE + 1,	//!	Null type driver
			SOFTWARE = NULL_TYPE + 1,	//! Software driver type
			WARP = SOFTWARE + 1			//! Warp driver type
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Levels

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Feature level types used to handle video cards.

	****************************************************************************************************************************************************************************/
	namespace D3D_Levels
	{
		/*!**********************************************************************************************************************************************************************

			@brief Types of levels

		************************************************************************************************************************************************************************/
		enum E
		{
			L_9_1,		//! Feature level 9.1
			L_9_2,		//!	Feature level 9.2
			L_9_3,		//!	Feature level 9.3
			L_10,		//!	Feature level 10
			L_10_1,		//!	Feature level 10.1
			L_11,		//!	Feature level 11
			L_11_1		//!	Feature level 11.1
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Usages

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Specific usage of a memory buffer

	****************************************************************************************************************************************************************************/
	namespace D3D_Usages
	{
		/*!**********************************************************************************************************************************************************************

			@brief Types of usage for buffers

		************************************************************************************************************************************************************************/
		enum E
		{
			DEFAULT,	//! Default usage
			INMUTABLE,	//! Inmutable usage
			DYNAMIC,	//! Dynamic usage
			STAGING		//! Staging
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Access

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Access given to either, write or read from a buffer in memory

	****************************************************************************************************************************************************************************/
	namespace D3D_Access
	{
		/*!**********************************************************************************************************************************************************************

			@brief Types of GPU access to buffers

		************************************************************************************************************************************************************************/
		enum E
		{
			NONE,
			WRITE =		0X10000L,	//! Access to write to the memory buffer
			READ =		0X20000L	//! Access to read from the memory buffer
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Binds

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Binds a specific set of memory to the GPU, so it is used in a specific way

	****************************************************************************************************************************************************************************/
	namespace D3D_Binds
	{
		/*!**********************************************************************************************************************************************************************

			@brief Types of GPU bindings

		************************************************************************************************************************************************************************/
		enum E
		{
			VERTEX_BUFFER =		0x1L,	//! Bind to GPU as a vertex buffer
			INDEX_BUFFER =		0X2L,	//! Bind to GPU as an index buffer
			CONST_BUFFER =		0X4L,	//! Bind to GPU as a constant buffer
			SHADER_RESOURCE =	0x8L,	//! Bind to GPU as a shader resource
			STREAM_OUTPUT =		0x10L,	//! Bind to GPU as a stream output
			RENDER_TARGET =		0x20l,	//! Bind to GPU as a render target
			DEPTH_STENCIL =		0x40L,	//! Bind to GPU as a depth stencil
			UNORDERED_ACCESS =	0x80l	//! Tell GPU of unknown access to buffer
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_FillModes

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Modes to draw geometry.
		Wireframe draws geometry as lines connecting the vertices
		Solid draws faces between the vertices, filling with color

	****************************************************************************************************************************************************************************/
	namespace D3D_FillModes
	{
		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		enum E
		{
			WIREFRAME = 2,	//! Render geometry in wireframe, connecting vertices by lines
			SOLID =		3	//! Render geometry in solid, filling the space between vertices
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_CullModes

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Culling modes to draw a specific side of the normal

	****************************************************************************************************************************************************************************/
	namespace D3D_CullModes
	{
		/*!**********************************************************************************************************************************************************************

			@brief

		************************************************************************************************************************************************************************/
		enum E
		{
			NONE =		1,	//! Show both sides of normals
			FRONT =		2,	//! Show front side of normal
			BACK =		3	//! Show back side of normal
		};
	}



	/*!**************************************************************************************************************************************************************************

		@namespace D3D_Topologies

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		@brief Topologies used to organize and draw geometry

	****************************************************************************************************************************************************************************/
	namespace D3D_Topologies
	{
		/*!**********************************************************************************************************************************************************************

			@brief 

		************************************************************************************************************************************************************************/
		enum E
		{
			UNDEFINED,			//! Not defined organization of geometry
			POINT_LIST,			//! Geometry organized in list of vertices/points
			LINE_LIST,			//! Geometry organized in list of lines (Two vertices form a line)
			LINE_STRIP,			//! Geometry organized in
			TRIANGLE_LIST,		//! Geometry organized in list of triangles (Three vertices form a triangle)
			TRIANGLE_STRIP,		//! Geometry organized in
			LINE_LIST_ADJ = 10,	//! Geometry organized in 
			LINE_STRIP_ADJ,		//! Geometry organized in
			TRIANGLE_LIST_ADJ,	//! Geometry organized in
			TRIANGLE_STRIP_ADJ	//! Geometry organized in
		};
	}
}